{
  "parser": "@typescript-eslint/parser",
  "env": {
    "es6": true,
    "browser": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier/@typescript-eslint", // Uses eslint-config-prettier to disable ESLint rules from @typescript-eslint/eslint-plugin that would conflict with prettier
    "plugin:prettier/recommended" // Enables eslint-plugin-prettier and eslint-config-prettier. This will display prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
  ],
  "plugins": [
    "unicorn",
    "react-hooks" // we can use it since CRA depends on it
  ],

  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true // Allows for the parsing of JSX
    }
  },

  "rules": {
    "no-unused-vars": "off",
    "no-shadow": ["error", { "builtinGlobals": false, "hoist": "functions", "allow": [] }],
    "@typescript-eslint/explicit-function-return-type": ["warn", { "allowExpressions": true }],
    // Since explicit-function-return-type will force us to use React.FC, no need in this rule
    "react/prop-types": 0,
    "@typescript-eslint/no-explicit-any": "error",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error",
    "no-nested-ternary": "off", // this just disables basic rule in favor of unicorn
    "unicorn/no-nested-ternary": "error", // this allows to nest only one level
    "unicorn/no-abusive-eslint-disable": "error",
    "@typescript-eslint/no-unused-vars": "off"
  },
  "settings": {
    "react": {
      "version": "detect" // Tells eslint-plugin-react to automatically detect the version of React to use
    }
  }
}
